#!/bin/bash

# Variables
SOLUTION="${1%.*}.cpp"
CORRECT="${2%.*}.cpp"
GENERATOR="${3%.*}.cpp"

GEN_PROGRAM="gen.out"
SOLUTION_PROGRAM="a.out"
CORRECT_PROGRAM="correct.out"
INPUT_FILE="testinput"
COMPILE_FLAGS=(-std=c++20 -Wshadow -Wall -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG -g)

# Cleanup on exit
function cleanup {
	echo "Exiting"

	rm $GEN_PROGRAM
	rm $SOLUTION_PROGRAM
	rm $CORRECT_PROGRAM
	rm $INPUT_FILE
	exit
}
trap cleanup SIGINT

# Validate input
BASE_FILENAME="${SOLUTION%.*}"
if [ "$#" -eq 1 ]
then
	CORRECT="${BASE_FILENAME}cor.cpp"
	GENERATOR="${BASE_FILENAME}gen.cpp"
elif [ "$#" -eq 2 ]
then
	GENERATOR="${BASE_FILENAME}gen.cpp"
elif [ "$#" -ne 3 ]
then
	echo "Usage: $0 <solution> [correct solution] [generator]"
	echo ""
	echo "	<solution>: The code to test"
	echo "	<correct solution>: A correct implementation to test against"
	echo "	<generator>: A program that takes a seed as argument and generates a testcase"
	exit 1
fi

# Compile
echo "Compiling programs"
g++ $GENERATOR ${COMPILE_FLAGS[*]} -o $GEN_PROGRAM 
g++ $SOLUTION  ${COMPILE_FLAGS[*]} -o $SOLUTION_PROGRAM
g++ $CORRECT   ${COMPILE_FLAGS[*]} -o $CORRECT_PROGRAM

# Test
echo "Testing solution (^C to exit)"
for((i = 1; ; ++i)) do
	echo -n "Test $i: "

	eval " ./$GEN_PROGRAM" $i > $INPUT_FILE
	
	if diff -w <(
		eval " ./$SOLUTION_PROGRAM" < $INPUT_FILE) <(
		eval " ./$CORRECT_PROGRAM" < $INPUT_FILE) &> /dev/null;
	then
		echo "correct"
	else
		echo "incorrect"
		echo "-------------------INPUT----------------------"
		cat $INPUT_FILE
		echo "-------------------OUTPUT---------------------"
		eval " ./$SOLUTION_PROGRAM" < $INPUT_FILE
		echo "------------------CORRECT---------------------"
		eval " ./$CORRECT_PROGRAM" < $INPUT_FILE
		break
	fi
done

# Cleanup
cleanup
