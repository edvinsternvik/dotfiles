#!/bin/bash

function print_help {
    SCRIPT_NAME=$(basename $BASH_SOURCE)
    printf "USAGE\n"
    printf "\t$SCRIPT_NAME write [configuration]\n"
    printf "\t\tWrite the dotfiles specified in the '# DOTFILES' section of the configuration file\n"
    printf "\t\tto the home directory\n\n"
    printf "\t$SCRIPT_NAME read [configuration]\n"
    printf "\t\tRead the dotfiles specified in the '# DOTFILES' section of the configuration file from\n"
    printf "\t\tthe home directory to the current directory\n\n"
    printf "\t$SCRIPT_NAME programs [configuration]\n"
    printf "\t\tInstall the programs specified in the '# PROGRAMS' section of the configuration file using pacman\n\n"
    printf "\t$SCRIPT_NAME aur [configuration]\n"
    printf "\t\tInstall the programs specified in the '# AUR' section of the configuration file using yay\n\n"
    printf "\t$SCRIPT_NAME commands [configuration]\n"
    printf "\t\tRun the commands specified in the '# COMMANDS' section of the configuration file\n\n"
    printf "\t$SCRIPT_NAME clean [configuration]\n"
    printf "\t\tClean the dotfiles from the specified configuration to the home directory\n\n"
    printf "\t$SCRIPT_NAME install [configuration]\n"
    printf "\t\tPerform a full install by installing all the programs, running all the commands and writing all\n"
    printf "\t\tthe dotfiles for the specified configuration\n\n"
    
    exit 1
}

CONFIGURATION_DIR="./configurations"

if [[ $# == 0 ]]; then
    echo -e "No command specified\n"
    print_help
fi

COMMAND="$1"

CONFIGURATION=""
if (( $# >= 2 )); then
    CONFIGURATION=$2
else
    echo "Available configurations"

    for file in "$CONFIGURATION_DIR"/*; do
        printf "> %s\n" $(basename "$file")
    done

    echo "Select configuration:"
    read CONFIGURATION
fi

CONFIG_FILE="$CONFIGURATION_DIR/$CONFIGURATION"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Invalid configuration: $CONFIG_FILE"
    exit 1
fi

DOTFILES=()
PACMAN_PROGRAMS=()
AUR_PROGRAMS=()
COMMANDS=()

CURRENT_TYPE=""
while read -r line; do
    if [[ "$line" == "# DOTFILES" ]]; then
        CURRENT_TYPE="DOTFILES"
    elif [[ "$line" == "# PACMAN" ]]; then
        CURRENT_TYPE="PACMAN"
    elif [[ "$line" == "# AUR" ]]; then
        CURRENT_TYPE="AUR"
    elif [[ "$line" == "# COMMANDS" ]]; then
        CURRENT_TYPE="COMMANDS"
    elif [ ! -z "$line" ]; then
        if [[ "$CURRENT_TYPE" == "DOTFILES" ]]; then
            DOTFILES+=( "$line" )
        elif [[ "$CURRENT_TYPE" == "PACMAN" ]]; then
            PACMAN_PROGRAMS+=( "$line" )
        elif [[ "$CURRENT_TYPE" == "AUR" ]]; then
            AUR_PROGRAMS+=( "$line" )
        elif [[ "$CURRENT_TYPE" == "COMMANDS" ]]; then
            COMMANDS+=( "$line" )
        else
            echo "Invalid line: $line. No config type specified"
            exit 1
        fi
    fi
done < "$CONFIG_FILE"

function write_dotfiles {
    echo "Writing $CONFIGURATION configuration"

    for file in "${DOTFILES[@]}"; do
        echo -e "  Writing: $file"

        mkdir -p $(dirname "$HOME/$file")
        cp -r "$file" "$HOME/$file"
    done
}

function read_dotfiles {
    echo "Reading $CONFIGURATION configuration"

    for file in "${DOTFILES[@]}"; do
        echo -e "  Reading: $file"

        mkdir -p $(dirname "$file")
        cp "$HOME/$file" "$file"
    done
}

function install_programs {
    echo "Installing $CONFIGURATION programs"

    eval "sudo pacman -S ${PACMAN_PROGRAMS[@]}"
}

function install_aur {
    echo "Installing $CONFIGURATION AUR programs"

    eval "sudo yay -S ${AUR_PROGRAMS[@]}"
}

function run_commands {
    echo "Running $CONFIGURATION commands"

    for command in "${COMMANDS[@]}"; do
        echo -e " Running: $command"

        eval "$command"
    done
}

function clean_dotfiles {
    echo "Cleaning $CONFIGURATION configuration"

    for file in "${DOTFILES[@]}"; do
        rm "$file"
    done
}

function install {
    echo "Full installation using $CONFIGURATION configuration"

    install_programs
    install_aur
    run_commands
    write_dotfiles
}

if [[ $COMMAND == "write" ]]; then
    write_dotfiles
elif [[ $COMMAND == "read" ]]; then
    read_dotfiles
elif [[ $COMMAND == "programs" ]]; then
    install_programs
elif [[ $COMMAND == "aur" ]]; then
    install_aur
elif [[ $COMMAND == "commands" ]]; then
    run_commands
elif [[ $COMMAND == "clean" ]]; then
    clean_dotfiles
elif [[ $COMMAND == "install" ]]; then
    install
else
    echo -e "Invalid command: $COMMAND\n"
    print_help
fi
